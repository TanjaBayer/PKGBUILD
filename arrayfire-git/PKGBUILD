# Maintainer: Benjamin Chr√©tien <chretien at lirmm dot fr>
pkgname=arrayfire-git
pkgdesc="High performance software library for parallel computing with an easy-to-use API."
url='https://github.com/arrayfire/arrayfire'
pkgver=20141113
arch=('i686' 'x86_64')
pkgrel=1
license=('BSD')
makedepends=('cmake' 'git' 'subversion')
depends=('blas' 'fftw')
optdepends=('cuda: CUDA backend'
            'libcl: OpenCL backend'
            'boost: dependency for CUDA and OpenCL backends'
            'boost-compute: dependency for OpenCL backend'
            'clblas: dependency for OpenCL backend'
            'freeimage: image support')
_dir=arrayfire
# TODO: move back to master once submodules fix is merged
source=("$_dir"::'git://github.com/arrayfire/arrayfire.git'#branch=devel)
md5sums=('SKIP')
provides=('arrayfire')
conficts=('arrayfire')

# CMake options
_cmake_options=(
  -DBUILD_CPU=ON
  -DCMAKE_BUILD_TYPE=Release
)

# Possible extra C++ compiler options
_cmake_cxx_flags=(
)

pkgver() {
  date +%Y%m%d
}

check_optdepends() {
  # Check if CUDA and related dependencies are installed
  if (pacman -Qqs cuda >/dev/null &&
      pacman -Qqs boost >/dev/null) ; then
    msg "Enabling CUDA support"
    _cmake_options=(${_cmake_options[@]} \
      -DBUILD_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="/opt/cuda" \
      -DLIBNVVM_HOME="/opt/cuda/nvvm")
  else
    msg "Disabling CUDA support"
  fi

  # TODO: enable this once clBLAS support works with the Arch package.
  # Check if OpenCL and related dependencies are installed
  #if (pacman -Qqs libcl >/dev/null &&
  #    pacman -Qqs opencl-headers >/dev/null &&
  #    pacman -Qqs boost >/dev/null &&
  #    pacman -Qqs clblas >/dev/null &&
  #    pacman -Qqs boost-compute >/dev/null) ; then
  #  msg "Enabling OpenCL support"
  #  _cmake_options=(${_cmake_options[@]} \
  #    -DBUILD_OPENCL=ON -DOPENCL_INCLUDE_DIRS="/usr/include/CL")
  #else
  msg "Disabling OpenCL support"
  #fi
}

build() {
  # Check optional dependencies
  check_optdepends

  # Download Git submodules
  cd ${srcdir}/${_dir}
  git submodule init
  git submodule update

  # Make build directory
  [ -d ${srcdir}/build ] || mkdir ${srcdir}/build
  cd ${srcdir}/build

  # Run CMake configuration
  cmake ${srcdir}/${_dir} \
    -DCMAKE_INSTALL_PREFIX=/usr \
    ${_cmake_options[@]} \
    -DCMAKE_CXX_FLAGS="${_cmake_cxx_flags[@]}"

  # Build
  make
}

package() {
  cd "${srcdir}/build"

  # Install
  make DESTDIR="${pkgdir}/" install
}
